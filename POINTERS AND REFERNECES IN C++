
POINTER // C++ program to illustrate Pointers

#include <bits/stdc++.h>
using namespace std;
void geeks()
{
	int var = 20;

	// declare pointer variable
	int* ptr;

	// note that data type of ptr and var must be same
	ptr = &var;

	// assign the address of a variable to a pointer
	cout << "Value at ptr = " << ptr << "\n";
	cout << "Value at var = " << var << "\n";
	cout << "Value at *ptr = " << *ptr << "\n";
}
// Driver program
int main()
{
geeks();
return 0;
}
O/P:
Value at ptr = 0x7ffe454c08cc
Value at var = 20
Value at *ptr = 20

1.CALL BY VALUE
2. Call-by-Reference with Pointer Arguments
3.Call-by-Reference with REFERENCE Arguments

// C++ program to illustrate call-by-methods

#include <bits/stdc++.h>
using namespace std;

// Pass-by-Value
int square1(int n)
{
	// Address of n in square1() is not the same as n1 in
	// main()
	cout << "address of n1 in square1(): " << &n << "\n";

	// clone modified inside the function
	n *= n;
	return n;
}
// Pass-by-Reference with Pointer Arguments
void square2(int* n)
{
	// Address of n in square2() is the same as n2 in main()
	cout << "address of n2 in square2(): " << n << "\n";

	// Explicit de-referencing to get the value pointed-to
	*n *= *n;
}
// Pass-by-Reference with Reference Arguments
void square3(int& n)
{
	// Address of n in square3() is the same as n3 in main()
	cout << "address of n3 in square3(): " << &n << "\n";

	// Implicit de-referencing (without '*')
	n *= n;
}
void geeks()
{
	// Call-by-Value
	int n1 = 8;
	cout << "address of n1 in main(): " << &n1 << "\n";
	cout << "Square of n1: " << square1(n1) << "\n";
	cout << "No change in n1: " << n1 << "\n";

	// Call-by-Reference with Pointer Arguments
	int n2 = 8;
	cout << "address of n2 in main(): " << &n2 << "\n";
	square2(&n2);
	cout << "Square of n2: " << n2 << "\n";
	cout << "Change reflected in n2: " << n2 << "\n";

	// Call-by-Reference with Reference Arguments
	int n3 = 8;
	cout << "address of n3 in main(): " << &n3 << "\n";
	square3(n3);
	cout << "Square of n3: " << n3 << "\n";
	cout << "Change reflected in n3: " << n3 << "\n";
}
// Driver program
int main() { geeks(); }


















When a variable is described as a reference it becomes an alias of the already existing variable. In simple terms, a referenced variable is another named variable of an existing variable keeping in mind that changes made in the reference variable will be reflected in the already existing variable. A reference variable is preceded with a ‘&’ symbol.

Syntax:

int GFG = 10;

// reference variable
int& ref = GFG;
